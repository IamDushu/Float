// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: patient.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    patient_id, 
    user_id,
    date_of_birth, 
    emergency_contact_name,  
    emergency_contact_phone,  
    medical_history,  
    allergies  
) VALUES (
   $1, $2, $3, $4, $5, $6, $7
) RETURNING patient_id, user_id, date_of_birth, emergency_contact_name, emergency_contact_phone, medical_history, allergies, created_at
`

type CreatePatientParams struct {
	PatientID             uuid.UUID `json:"patient_id"`
	UserID                uuid.UUID `json:"user_id"`
	DateOfBirth           time.Time `json:"date_of_birth"`
	EmergencyContactName  string    `json:"emergency_contact_name"`
	EmergencyContactPhone string    `json:"emergency_contact_phone"`
	MedicalHistory        string    `json:"medical_history"`
	Allergies             string    `json:"allergies"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.PatientID,
		arg.UserID,
		arg.DateOfBirth,
		arg.EmergencyContactName,
		arg.EmergencyContactPhone,
		arg.MedicalHistory,
		arg.Allergies,
	)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.UserID,
		&i.DateOfBirth,
		&i.EmergencyContactName,
		&i.EmergencyContactPhone,
		&i.MedicalHistory,
		&i.Allergies,
		&i.CreatedAt,
	)
	return i, err
}

const getPatient = `-- name: GetPatient :one
SELECT patient_id, user_id, date_of_birth, emergency_contact_name, emergency_contact_phone, medical_history, allergies, created_at FROM patients
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetPatient(ctx context.Context, userID uuid.UUID) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, userID)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.UserID,
		&i.DateOfBirth,
		&i.EmergencyContactName,
		&i.EmergencyContactPhone,
		&i.MedicalHistory,
		&i.Allergies,
		&i.CreatedAt,
	)
	return i, err
}
